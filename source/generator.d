/*
Copyright (c) 2021 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the \"Software\") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module generator;

import std.algorithm;
import std.array;
import std.ascii: toUpper;
import std.conv;
import std.format;
import std.json;
import std.stdio;
import std.string;

enum WGPUTypePrefix = "WGPU";
enum WGPUChain = "WGPUChainedStruct chain";
enum WGPUNextInChainPtr = "WGPUChainedStruct* nextInChain";
enum WGPUNextInChainConstPtr = "const(WGPUChainedStruct)* nextInChain";

string capitalizeFirst(string s) pure @trusted
{
    return toUpper(s[0]) ~ s[1..$];
}

string toCamelCase(in string str, string sep = "_", bool firstCapitalize = true) pure @trusted
{
    auto arr = array(filter!"a.length > 0"(str.split(sep)));
    string[] ret;
    foreach(i, v; arr)
    {
        auto bb = v;
        if (i == 0)
        {
            if (firstCapitalize)
                bb = bb.capitalizeFirst;
        }
        else
            bb = bb.capitalizeFirst;
        ret ~= bb;
    }
    return ret.join("");
}

string chainedStructBlock = "struct WGPUChainedStruct
{
    const(WGPUChainedStruct)* next;
    WGPUSType sType;
}

struct WGPUChainedStructOut
{
    WGPUChainedStructOut* next;
    WGPUSType sType;
}
";

class Generator
{
    string[string] basicTypes;
    JSONValue[string] root;
    
    this(string input)
    {
        basicTypes = [
            "void": "void",
            "bool": "bool",
            "char": "char",
            "int16_t": "short",
            "uint16_t": "ushort",
            "int32_t": "int",
            "int64_t": "long",
            "uint32_t": "uint",
            "uint64_t": "ulong",
            "float": "float",
            "double": "double"
        ];
        
        root = parseJSON(input).get!(JSONValue[string]);
    }
    
    string toWGPUType(string s)
    {
        if (s in basicTypes)
            return basicTypes[s];
        else
            return WGPUTypePrefix ~ toCamelCase(s, " ", true);
    }

    string toWGPUProperty(string s)
    {
        return toCamelCase(s, " ", false);
    }
    
    string toWGPUEnumValue(string s)
    {
        return toCamelCase(s, " ", true);
    }
    
    string generateTypes(string prependBlock = "")
    {
        string[] objects;
        string[] enums;
        string[] structs;
        
        foreach(symbolName, symbol; root)
        if (symbol.type == JSONType.object)
        {
            if ("category" in symbol)
            {
                string category = ("category" in symbol).str;
                if (category == "object")
                {
                    objects ~= generateObject(symbolName, symbol);
                    // TODO: process object methods
                }
                else if (category == "enum" || category == "bitmask")
                    enums ~= generateEnum(symbolName, symbol);
                else if (category == "structure")
                    structs ~= generateStruct(symbolName, symbol);
            }
        }
        
        string output = prependBlock;
        output ~= "\n";
        output ~= objects.sort.join();
        output ~= "\n";
        output ~= enums.sort.join();
        output ~= "\n";
        output ~= chainedStructBlock;
        output ~= structs.sort.join();
        return output;
    }
    
    string generateObject(string symbolName, JSONValue symbol)
    {
        string output = "";
        output ~= format("alias %s = void*;\n", toWGPUType(symbolName));
        return output;
    }
    
    string generateEnum(string symbolName, JSONValue symbol)
    {
        string output = "";
        output ~= format("enum %s\n", toWGPUType(symbolName));
        output ~= "{\n";
        
        if ("values" in symbol)
        {
            auto values = ("values" in symbol).array;
            foreach(i, v; values)
            {
                string name = ("name" in v).str;
                string value = ("value" in v).integer.to!string;
                
                name = toWGPUEnumValue(name);
                if (name == "1D") name = "D1";
                else if (name == "2D") name = "D2";
                else if (name == "3D") name = "D3";
                else if (name == "2DArray") name = "D2Array";
                
                output ~= format("    %s = %s%s\n", name, value, (i < values.length - 1)? "," : "");
            }
        }
        
        output ~= "}\n\n";
        return output;
    }
    
    string generateStruct(string symbolName, JSONValue symbol)
    {
        string output = "";
        output ~= format("struct %s\n", toWGPUType(symbolName));
        output ~= "{\n";
        
        if ("extensible" in symbol)
        {
            auto ext = "extensible" in symbol;
            if (ext.type == JSONType.string)
            {
                string extensible = ("extensible" in symbol).str;
                if (extensible == "in")
                    output ~= format("    %s;\n", WGPUNextInChainConstPtr);
                else if (extensible == "out")
                    output ~= format("    %s;\n", WGPUNextInChainPtr);
            }
        }
        if ("chained" in symbol)
        {
            auto ch = "chained" in symbol;
            if (ch.type == JSONType.string)
            {
                string chained = ("chained" in symbol).str;
                if (chained == "in")
                    output ~= format("    %s;\n", WGPUChain);
            }
        }
        
        auto members = ("members" in symbol).array;
        foreach(i, member; members)
        {
            string memberName = ("name" in member).str;
            string memberType = ("type" in member).str;
            string memberAnnotation = "";
            
            memberName = toWGPUProperty(memberName);
            memberType = toWGPUType(memberType);
            
            //if (symbolName == "device descriptor" && memberName == "label")
            //    continue;
            
            if (memberName == "module")
                memberName = "modul";
            
            if ("annotation" in member)
                memberAnnotation = ("annotation" in member).str;
            
            bool pointer = false;
            if (memberAnnotation == "*")
                pointer = true;
            
            bool constant = false;
            if (memberAnnotation == "const*")
            {
                constant = true;
                pointer = true;
            }
            
            if (constant)
                memberType = "const(" ~ memberType ~ ")";
            if (pointer)
                memberType = memberType ~ "*";
            
            output ~= format("    %s %s;\n", memberType, memberName);
        }
        
        output ~= "}\n\n";
        return output;
    }
}
